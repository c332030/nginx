
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}

http {

  include       mime.types;
  default_type  application/octet-stream;

  access_log  logs/access.log;
  error_log logs/error.log;

  sendfile        on;

  keepalive_timeout  65;

  gzip  on;

  lua_need_request_body on;

  resolver 119.29.29.29 ipv6=off;

  server {
      listen       80;
      server_name  localhost;

      charset utf-8;

      access_log  logs/80.access.log;
      error_log  logs/80.error.log;

      location / {
        root   html;
        index  index.html index.htm;
      }

      #error_page  404              /404.html;

      error_page   500 502 503 504  /50x.html;
      location = /50x.html {
          root   html;
      }
  }

  log_format main escape=json '{ "time_local": "$time_local", '
                       '"remote_addr": "$remote_addr",'
                       '"costime": "$request_time",'
                       '"realtime": "$upstream_response_time",'
                       '"status": $status,'
                       '"x_forwarded": "$http_x_forwarded_for",'
                       '"referer": "$http_referer",'
                       '"request": "$request",'
                       '"upstr_addr": "$upstream_addr",'
                       '"bytes":$body_bytes_sent,'
                       '"dm":$request_body,'
                       '"agent": "$http_user_agent" }';


  server {
    listen       404;
    server_name  localhost;

    charset utf-8;

    access_log  logs/404.access.log main;
    error_log  logs/404.error.log;

    location /internal-proxy {
      internal;
      set_by_lua $query_url 'return ngx.unescape_uri(ngx.var.arg_url);';

      if ($query_url = '') {
        return 404;
      }

      proxy_pass $query_url;
    }

    location / {
      add_header Access-Control-Allow-Origin *;
      add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
      add_header Access-Control-Allow-Headers 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';

      if ($request_method = 'OPTIONS') {
        return 204;
      }

      rewrite_by_lua_block {
        local body_str = ngx.req.get_body_data()
        --ngx.say("body_str")
        --ngx.say(body_str)

        local function isNotEmpty(s)
          return s ~= nil and s ~= ""
        end

        local cjson = require "cjson"

        value = cjson.decode(body_str)

        --ngx.say("value")

        if isNotEmpty(value) then
          --ngx.say(cjson.encode(value))

          head = value["head"]
          if(isNotEmpty(head)) then
            --ngx.say(cjson.encode(head))

            proxy = head["proxy"]
            if(isNotEmpty(proxy)) then
              --ngx.say(cjson.encode(proxy))

              url = proxy["url"]

              --ngx.say("url= ".. url)

              if isNotEmpty(url) then

                port = proxy["port"]

                --ngx.say("port= " .. port)

                if isNotEmpty(port) then
                  url = url..":"..port
                end

                path = ngx.var.request_uri
                --ngx.say("path= " .. path)

                if isNotEmpty(path) then
                  url = url..path
                end

                --ngx.say("url= " .. url)

                local res = ngx.location.capture(
                  '/internal-proxy',
                  { args = {url = url}}
                )

                --容错判断
                ngx.print(res.body)
              end
            end
          end
        end
      }
    }
  }
}
